dnorm(x = c(1,2,3) , mean = 0, sd = 0.1)
dnorm(x = c(1,2,3) , mean = 0, sd = 1)
dnorm(x = c(1,2,3) , mean = 0, sd = 1, log= T)
rnorm(x = c(1,2,3) , mean = 0, sd = 1, log= T)
rnorm( mean = 0, sd = 1)
rnorm(n = 1, mean = 0, sd = 1)
nloglik<- function(x,q) sum(-dexp(x=x,rate=q,log=T))
xs = c(1,1)
optimize(f= nloglik, x= xs,interval = c(0,10))
rnorm(x = 1 , mean = 0, sd = 1, log= T)
dnorm(x = c(1,2,3) , mean = 0, sd = 1, log= T)
rnorm(x =5, mean = 0, sd = 1)*10
rnorm(x =5, mean = 0, sd = 1)
rnorm(n= 5, mean = 0, sd = 1)
rnorm(n= 5, mean = 0, sd = 1)
### GERADOR
xo = 0.1
dt = 2
### GERADOR
x0 = 0.1
### GERADOR
x0 = 0.1
dt = 2
dx = rnorm(n= 5, mean = 0, sd = 1)*dt
x1 = x0 + dx
x2 = x0 +dx
### GERADOR
x0 = 0.1
dt = 2
dx = rnorm(n= 2, mean = 0, sd = 1)*dt
x1 = x0 + dx
x2 = x0 +dx
### GERADOR
x0 = 0.1
dt = 2
dx = rnorm(n= 2, mean = 0, sd = 1)*dt
x1 = x0 + dx[1]
x2 = x0 + dx[2]
dnorm(x = c(x1,x2), mean = 0, sd= 1)
dnorm(x = c(x1,x2), mean = 0, sd= 1, log=T)
dnorm(x = c(x1,x2), mean = 0, sd= 2, log=T)
library(MASS) # Para a função mvrnorm
# Média esperada (assume-se que o ancestral tem traço igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(t, t / 2,
t / 2, t),
nrow = 2, ncol = 2)
sigma2 = 1
# Média esperada (assume-se que o ancestral tem traço igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(t, t / 2,
t / 2, t),
nrow = 2, ncol = 2)
dt = 1
# Média esperada (assume-se que o ancestral tem traço igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(dt, dt/2,
dt/2, dt),
nrow = 2, ncol = 2)
# Vetor de traços observados
traits <- c(x1, x2)
# Calcula a log-verossimilhança
log_likelihood <- dmvnorm(traits,
mean = mean_vector,
sigma = cov_matrix,
log = TRUE
)
library(emdbook) # Para a função mvrnorm
install.packages(emdbook)
install.packages("emdbook")
library(emdbook) # Para a função mvrnorm
# Calcula a log-verossimilhança
log_likelihood <- dmvnorm(x =traits,
mean = mean_vector,
sigma = cov_matrix,
log = TRUE
)
# Calcula a log-verossimilhança
log_likelihood <- dmvnorm(x =traits,
mu = mean_vector,
Sigma = cov_matrix,
log = TRUE
)
log_likelihood
lnlBM <- function(x1, x2, dt, sigma2) {
# Média esperada (assume-se que o ancestral tem traço igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(dt, dt/2,
dt/2, dt),
nrow = 2, ncol = 2)
# Vetor de traços observados
traits <- c(x1, x2)
# Calcula a log-verossimilhança
lnL <- dmvnorm(x =traits,
mu = mean_vector,
Sigma = cov_matrix,
log = TRUE
)
return(lnL)
}
x1
optimize(f= lnlBM, x1= x1, x2 = x2, dt = 2)
optimize(f= lnlBM, x1= x1, x2 = x2, dt = 2,interval = c(0,10))
optimize(f= lnlBM,
x1= x1,
x2 = x2, dt = 1,interval = c(0,10))
x1
x2
lnlBM <- function(x1, x2, dt, sigma2) {
# Média esperada (assume-se que o ancestral tem traço igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(dt, dt/2,
dt/2, dt),
nrow = 2, ncol = 2)
# Vetor de traços observados
traits <- c(x1, x2)
# Calcula a log-verossimilhança
lnL <- dmvnorm(x =traits,
mu = mean_vector,
Sigma = cov_matrix,
log = TRUE
)
return(lnL)
}
optimize(f= lnlBM,
x1 = 0.1,
x2 = 0.3,
dt = 1,interval = c(0,10))
optimize(f= lnlBM,
x1 = 0.1,
x2 = 0.3,
dt = 10,
interval = c(0,10)
)
# Calcula a log-verossimilhança
lnL <- -dmvnorm(x =traits,
mu = mean_vector,
Sigma = cov_matrix,
log = TRUE
)
lnlBM <- function(x1, x2, dt, sigma2) {
# Média esperada (assume-se que o ancestral tem traço igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(dt, dt/2,
dt/2, dt),
nrow = 2, ncol = 2)
# Vetor de traços observados
traits <- c(x1, x2)
# Calcula a log-verossimilhança
lnL <- -dmvnorm(x =traits,
mu = mean_vector,
Sigma = cov_matrix,
log = TRUE
)
return(lnL)
}
lnlBM(x1,
x2,
dt)
optimize(f= lnlBM,
x1 = 0.1,
x2 = 0.3,
dt = 10,
interval = c(0,10)
)
optimize(f= lnlBM,
x1 = 0.1,
x2 = 0.3,
dt = 1,
interval = c(0,10)
)
lnlBM <- function(x1, x2, dt, sigma2) {
# Média esperada do ancestral igual à média
mu <- mean(c(x1, x2))
mean_vector <- c(mu, mu)
# Matriz de covariância
cov_matrix <- sigma2 * matrix(c(dt, 0,
0, dt),
nrow = 2, ncol = 2)
# Vetor de traços observados
traits <- c(x1, x2)
# Calcula a log-verossimilhança
lnL <- -dmvnorm(x =traits,
mu = mean_vector,
Sigma = cov_matrix,
log = TRUE
)
return(lnL)
}
optimize(f= lnlBM,
x1 = 0.1,
x2 = 0.3,
dt = 1,
interval = c(0,10)
)
dt = 1
v <- (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt)) # Variância
sigma2 = 1
alpha = 1
dt = 1
v <- (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt)) # Variância
c <- (sigma2 / (2 * alpha)) * (1 - exp(-alpha * dt))     # Covariância
alpha * dt
-2 * alpha * dt
exp(-2 * alpha * dt)
exp(-alpha * dt)
-2 * alpha * dt
-alpha * dt
exp(-2 * alpha * dt)
exp(-alpha * dt)
exp(-2 * alpha * t)
exp(-2 * alpha * t)
-2 * alpha * dt
exp(-2 * alpha * dt)
exp(-alpha * dt)
(1 - exp(-2 * alpha * dt))
(1 - exp(-alpha * dt))
(sigma2 / (2 * alpha))
sigma2 = c(0.01,0.1, 0.2,0.3)
sigma2 = c(0.01, 0.1, 0.2, 0.3, 0.4)
alpha = 0.1
plot(sigma ~ (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
(sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
sigma
plot(sigma2 ~ (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
sigma2
plot(x = sigma2 ,
y = (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
sigma2 = c(0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)
alpha = 0.1
plot(x = sigma2 ,
y = (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
sigma2 = c(0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)
alpha = 0.2
plot(x = sigma2 ,
y = (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
sigma2 = c(0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)
alpha = 0.4
plot(x = sigma2 ,
y = (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
sigma2 = c(0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)
alpha = 0.1
plot(x = sigma2 ,
y = (sigma2 / (2 * alpha)) * (1 - exp(-2 * alpha * dt))
)
dt
