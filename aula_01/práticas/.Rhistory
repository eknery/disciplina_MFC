### bibliotecas
if (!require("phytools")) install.packages("phytools"); library("phytools")
if (!require("geiger")) install.packages("geiger"); library("geiger")
### carregando dados fenotípicos
miconia.data<-read.csv("dados/miconia2.csv", row.names=1, h= T)
head(miconia.data)
### carregando filogenia
miconia.tree<-read.tree("dados/miconia.nwk")
print(miconia.tree,printlen=2)
### valores de interesse em um vetor nomeado
plant.size<- miconia.data[,"plant.size"]
### valores de interesse em um vetor nomeado
plant.size<- miconia.data[,"leaf.size"]
names(plant.size)<-rownames(miconia.data)
plant.size
### verificando a distribuição dos valores
hist(plant.size)
### verificando correspondência entre dados e filogenia
name.check(miconia.tree, miconia.data)
### gráfico da filogenia
plotTree.barplot(tree = miconia.tree,
x = plant.size,
args.plotTree=list(fsize=0.7)
)
### ajustando modelo Pontuado
fitPunctual <-fitContinuous(phy = miconia.tree,
dat = plant.size,
model ="kappa"
)
### ajustando modelo de Random Walk
fitRWalk <-fitContinuous(phy = miconia.tree,
dat = plant.size,
model ="BM"
)
### ajustando modelo Direcional
fitDirectional <-fitContinuous(phy = miconia.tree,
dat = plant.size,
model ="mean_trend"
)
### valores de AIC
aic = setNames(c(fitPunctual$opt$aic,
fitRWalk$opt$aic,
fitDirectional$opt$aic),
c("Punctual","Random Walk","Directional")
)
### ver valores de AIC
aic
### número de parâmetros dos modelos
k = setNames(c(fitPunctual$opt$k,
fitRWalk$opt$k,
fitDirectional$opt$k),
c("Punctual","Random Walk","Directional")
)
### ver número de parâmetros
k
### estimativas de taxa evolutiva
sigma.sq = setNames(c(fitPunctual$opt$sigsq,
fitRWalk$opt$sigsq,
fitDirectional$opt$sigsq),
c("Punctual","Random Walk","Directional")
)
### ver taxas evolutivas
sigma.sq
### estimativas de fenótipo ancestral
z0= setNames(c(fitPunctual$opt$z0,
fitRWalk$opt$z0,
fitDirectional$opt$z0),
c("Punctual","Random Walk","Directional")
)
### ver estimativas de fenótipo ancestral
z0
### testando sinal filogenético por lambda de Pagel
lambda_gs = phylosig(tree = miconia.tree,
x = leaf.size,
method="lambda",
test = TRUE
)
### valores de interesse em um vetor nomeado
leaf.size<- miconia.data[,"leaf.size"]
names(leaf.size)<-rownames(miconia.data)
leaf.size
### verificando a distribuição dos valores
hist(leaf.size)
### verificando correspondência entre dados e filogenia
name.check(miconia.tree, miconia.data)
### gráfico da filogenia
plotTree.barplot(tree = miconia.tree,
x = leaf.size,
args.plotTree=list(fsize=0.7)
)
### testando sinal filogenético por lambda de Pagel
lambda_gs = phylosig(tree = miconia.tree,
x = leaf.size,
method="lambda",
test = TRUE
)
### verificando resultados
lambda_gs
plot(lambda_gs,las=1,cex.axis=0.9)
### verificando resultados
lambda_gs
leaf.size
### verificando resultados
lambda_gs
### testando sinal filogenético por K de Bloomberg
K_gs<-phylosig(tree = miconia.tree,
x = leaf.size,
method= "K",
test = TRUE,
nsim = 10000)
### verificando resultados
K_gs
plot(K_gs,las=1,cex.axis=0.9)
### bibliotecas
if (!require("phytools")) install.packages("phytools"); library("phytools")
if (!require("geiger")) install.packages("geiger"); library("geiger")
### carregando dados fenotípicos
miconia.data<-read.csv("dados/miconia.csv", row.names=1, h= T)
head(miconia.data)
### carregando filogenia
miconia.tree<-read.tree("dados/miconia.nwk")
print(miconia.tree,printlen=2)
### valores de interesse em um vetor nomeado
leaf.size<- miconia.data[,"inflor.size"]
names(leaf.size)<-rownames(miconia.data)
leaf.size
### verificando a distribuição dos valores
hist(leaf.size)
### verificando correspondência entre dados e filogenia
name.check(miconia.tree, miconia.data)
### gráfico da filogenia
plotTree.barplot(tree = miconia.tree,
x = leaf.size,
args.plotTree=list(fsize=0.7)
)
### testando sinal filogenético por lambda de Pagel
lambda_gs = phylosig(tree = miconia.tree,
x = leaf.size,
method="lambda",
test = TRUE
)
### verificando resultados
lambda_gs
plot(lambda_gs,las=1,cex.axis=0.9)
### testando sinal filogenético por K de Bloomberg
K_gs<-phylosig(tree = miconia.tree,
x = leaf.size,
method= "K",
test = TRUE,
nsim = 10000)
### verificando resultados
K_gs
plot(K_gs,las=1,cex.axis=0.9)
library(ape)
tamanho = c(4,5,6,3,7)
tempo = c(9,9.5,10,9, 9.75)
fit.lm = lm(tempo ~ tamanho)
summary(fit.lm)
plot(x = tamanho,
y = tempo,
xlab = "Tamanho do corpo",
ylab = "Tempo de geração",
pch=21,bg="gray",cex=2,
cex.lab=1.5
)
