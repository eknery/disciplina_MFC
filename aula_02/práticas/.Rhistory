### carregando dados fenotípicos
anole.morphology<-read.csv("dados/anole.data.csv",
row.names=1)
### carregando dados fenotípicos
anole.ecomorph<-read.csv("dados/ecomorph.csv",
row.names=1,
stringsAsFactors=TRUE)
## using phytools::read.simmap
ecomorph.tree<-read.simmap(file="dados/anolis_mapped.nex",
format="nexus")
### bibliotecas
library(phytools)
library(geiger)
### carregando dados fenotípicos
anole.morphology<-read.csv("dados/anole.data.csv",
row.names=1)
### carregando dados fenotípicos
anole.ecomorph<-read.csv("dados/ecomorph.csv",
row.names=1,
stringsAsFactors=TRUE)
## using phytools::read.simmap
ecomorph.tree<-read.simmap(file="dados/anolis_mapped.nex",
format="nexus")
ecomorph.tree
## using phytools::read.simmap
ecomorph.tree<-read.simmap(file="dados/anolis_mapped.nexus",
format="nexus")
## using phytools::read.simmap
ecomorph.tree<-read.simmap(file="dados/anolis_mapped.nexus",
format="nexus",
version=1.5)
ecomorph.tree
### verificando correspondÊncia entre dados e árvore
chk<-name.check(ecomorph.tree,anole.morphology)
summary(chk)
anole.morphology[-which(rownames(anole.morphology)%in%chk$data_not_tree),]
summary(chk)
### retirando dados das espécies ausentes na árvore
ecomorph.data<-anole.morphology[-which(rownames(anole.morphology)%in%chk$data_not_tree),]
ecomorph.data
### verificando correspondÊncia entre dados e árvore
chk<-name.check(ecomorph.tree,anole.morphology)
summary(chk)
### retirando dados das espécies ausentes na árvore
anole.morphology<-anole.morphology[-which(rownames(anole.morphology)%in%chk$data_not_tree),]
### verificando correspondÊncia entre dados e árvore
chk<-name.check(ecomorph.tree,anole.morphology)
summary(chk)
chk
### retirando dados das espécies ausentes na árvore
ecomorph.data<-anole.morphology[-which(rownames(anole.morphology)%in%chk$data_not_tree),]
### verificando correspondência entre dados e árvore
chk<-name.check(ecomorph.tree,ecomorph.data)
chk
## run phylogenetic PCA and print the results
pca<-phyl.pca(ecomorph.tree,ecomorph.data)
print(pca)
### dados de 'regimes'
ouwie.data<-data.frame(Genus_species=rownames(scores(pca)),
Reg=anole.ecomorph[rownames(scores(pca)),],
X=as.numeric(scores(pca)[,3]))
head(ouwie.data,n=10)
### plotando a árvore mapeada
cols<-setNames(rainbow(n=6),levels(anole.ecomorph[,1]))
plot(ecomorph.tree,
cols,
lwd=2,
ftype="i",
fsize=0.4,
ylim=c(-4,82),
outline=TRUE)
add.simmap.legend(colors=cols,prompt=FALSE,x=0,y=-2,
vertical=FALSE,fsize=0.9)
### ajustando BM com taxa única one-rate Brownian model
fitBM<-OUwie(phy = ecomorph.tree,
data = ouwie.data,
model ="BM1",
simmap.tree = TRUE
)
if (!require("OUwie")) install.packages("OUwie"); library("OUwie")
### ajustando BM com taxa única one-rate Brownian model
fitBM<-OUwie(phy = ecomorph.tree,
data = ouwie.data,
model ="BM1",
simmap.tree = TRUE
)
## verificar resultados
fitBM
### ajustando BM com múltiplas taxas de variação
fitBMS<-OUwie(phy = ecomorph.tree,
data = ouwie.data,
model ="BMS",
simmap.tree = TRUE
)
## verificar resultados
fitBS
## verificar resultados
fitBMS
### ajustando OU com múltiplos ótimos
fitOUM<-OUwie(phy = ecomorph.tree,
data = ouwie.data,
model ="OUM",
simmap.tree = TRUE
)
## verificar resultados
fitOUM
aic<-setNames(c(fitBM$AIC,fitBMS$AIC,fitOUM$AIC),
c("BM1","BMS","OUM"))
aic
### peso ralativo dos modelos
aic.w(aic)
### estados das espécies atuais
tips<-getStates(ecomorph.tree,"tips")
## cores para as espécies atuais
tip.cols<-cols[tips]
## plot da árvores mais as características
plotTree.barplot(ecomorph.tree,scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3 (",""%up%"","limbs, ",
""%down%"","lamellae)",sep="")),
cex.lab=0.8))
## plot da árvores mais as características
plotTree.barplot(ecomorph.tree,scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3 (",""%up%"","limbs, ",
""%down%"","lamellae)",sep="")),
cex.lab=0.8))
## add an informative legend
legend("topright",levels(anole.ecomorph[,1]),
pch=22,pt.bg=cols,pt.cex=1.5,cex=0.9)
## plot da árvores mais as características
plotTree.barplot(phy = ecomorph.tree,
dat = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3 (",""%up%"","limbs, ",
""%down%"","lamellae)",sep="")),
cex.lab=0.8))
## plot da árvores mais as características
plotTree.barplot(tree = ecomorph.tree,
dat = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3 (",""%up%"","limbs, ",
""%down%"","lamellae)",sep="")),
cex.lab=0.8))
## plot da árvores mais as características
plotTree.barplot(tree = ecomorph.tree,
x = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3 (",""%up%"","limbs, ",
""%down%"","lamellae)",sep="")),
cex.lab=0.8))
## plot da árvores mais as características
plotTree.barplot(tree = ecomorph.tree,
x = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3")),
cex.lab=0.8))
## add an informative legend
legend("topright",levels(anole.ecomorph[,1]),
pch=22,pt.bg=cols,pt.cex=1.5,cex=0.9)
## plot da árvores mais as características
plotTree.barplot(tree = ecomorph.tree,
x = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3")),
cex.lab=0.8))
## add an informative legend
legend("topright",levels(anole.ecomorph[,1]),
pch=22,pt.bg=cols,pt.cex=1.5,cex=0.9)
