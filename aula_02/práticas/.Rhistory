### bibliotecas
if (!require("phytools")) install.packages("phytools"); library("phytools")
if (!require("geiger")) install.packages("geiger"); library("geiger")
if (!require("OUwie")) install.packages("OUwie"); library("OUwie")
### carregando dados fenotípicos
anole.morphology<-read.csv("dados/anole.data.csv",
row.names=1)
### carregando dados fenotípicos
anole.ecomorph<-read.csv("dados/ecomorph.csv",
row.names=1,
stringsAsFactors=TRUE)
### carregando dados fenotípicos
anole.morphology<-read.csv("dados/anole.data.csv",
row.names=1)
### carregando dados fenotípicos
anole.ecomorph<-read.csv("dados/ecomorph.csv",
row.names=1,
stringsAsFactors=TRUE)
### carregando árvore filogenética 'mapeada'
ecomorph.tree<-read.simmap(file="dados/anolis_mapped.nexus",
format="nexus",
version=1.5)
ecomorph.tree
### verificando correspondência entre dados e árvore
chk<-name.check(ecomorph.tree,anole.morphology)
summary(chk)
### retirando dados das espécies ausentes na árvore
ecomorph.data<-anole.morphology[-which(rownames(anole.morphology)%in%chk$data_not_tree),]
### verificando correspondência entre dados e árvore
chk<-name.check(ecomorph.tree,ecomorph.data)
chk
### PCA filogenética = relação entre medições, consideração correlação filogenética
pca<-phyl.pca(ecomorph.tree,ecomorph.data)
### verificar relação entre as variáveis
print(pca)
### organizando dados de interesse
ouwie.data<-data.frame(Genus_species=rownames(scores(pca)),
Reg=anole.ecomorph[rownames(scores(pca)),],
X=as.numeric(scores(pca)[,3]))
ouwie.data
ecomorph.tree
### cores para cada ecomorfo
cols = c(
"CG" = "darkblue",
"GB" = "darkgreen",
"TC" = "darkmagenta",
"TG" = "darkred",
"Tr" = "red",
"Tw" = "darkgoldenrod"
)
### estados das espécies atuais
tips<-getStates(ecomorph.tree,"tips")
## cores para as espécies atuais
tip.cols<-cols[tips]
### plot da árvores mais as características
plotTree.barplot(tree = ecomorph.tree,
x = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3")),
cex.lab=0.8))
## adicionar legenda
legend("topright",levels(anole.ecomorph[,1]),
pch=22,pt.bg=cols,pt.cex=1.5,cex=0.9)
### plot da árvores mais as características
plotTree.barplot(tree = ecomorph.tree,
x = scores(pca)[,3],
args.plotTree=list(fsize=0.4),
args.barplot=list(col=tip.cols,
xlab=expression(paste("PC3")),
cex.lab=0.8))
## adicionar legenda
legend("topright",levels(anole.ecomorph[,1]),
pch=22,pt.bg=cols,pt.cex=1.5,cex=0.9)
# Vetor para armazenar o tamanho da população ao longo do tempo
population <- numeric(time_steps + 1)
time_steps = 100
time_steps = 10
# Vetor para armazenar o tamanho da população ao longo do tempo
population <- numeric(time_steps + 1)
population
n0 = 10
## Parâmetros do modelo Birth-Death
# Taxa de especiação por espécie por unidade de tempo
birth_rate <- 0.1
# Taxa de extinção por espécie por unidade de tempo
death_rate <- 0.05
nt <- n_spp[t]
## Cenário de diversidade
# número inicial de espécies
n0 = 10
# Vetor para armazenar o número de espécies ao longo do tempo
n_spp <- numeric(tf + 1)
n_spp[1] <- n0
# Número de espécies atuais
nt <- n_spp[t]
# Número esperado de especiações e extinções
births <- rbinom(1, nt, birth_rate)
# Número de espécies atuais
nt <- n_spp[t]
# Vetor para armazenar o número de espécies ao longo do tempo
n_spp <- numeric(tf + 1)
n_spp[1] <- n0
# Taxa de extinção por espécie por unidade de tempo
death_rate <- 0.05
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 10
## Cenário de diversidade
# número inicial de espécies
n0 = 10
# Vetor para armazenar o número de espécies ao longo do tempo
n_spp <- numeric(tf + 1)
n_spp[1] <- n0
t =1
# Número de espécies atuais
nt <- n_spp[t]
# Número esperado de especiações e extinções
births <- rbinom(1, nt, birth_rate)
deaths <- rbinom(1, nt, death_rate)
births
deaths
nt
birth_rate
rbinom(1, nt, birth_rate)
rbinom(1, nt, death_rate)
rbinom(1, nt, death_rate)
rbinom(1, nt, death_rate)
rbinom(1, nt, death_rate)
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.1
# Taxa de extinção por unidade de tempo
mu <- 0.05
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = lambda)
lambda_t
mu_t
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.1
# Taxa de extinção por unidade de tempo
mu <- 0.01
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = lambda)
lambda_t
mu_t
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
mu_t
lambda_t
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.1
# Taxa de extinção por unidade de tempo
mu <- 0.01
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 10
# tempo atual
ti <- 0
# vetor para armazenar o tempo
ts = ti
## Cenário de diversidade
# número atual de espécies
nt <- 10
# Vetor de diversidade de espécies
n_spp <- nt
while (ti < tf) {
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
# se a especiação acontece primeiro
if(lambda_t < mu_t){
# adicionar uma espécie
nt = nt + 1
# atualizar vetor de diversidade
n_spp = c(n_spp, nt)
# atualizar tempo
ti = ti + lambda_t
}
# se a extinção acontece primeiro
if(lambda_t > mu_t){
# remover uma espécie
nt = nt - 1
# atualizar vetor de diversidade
n_spp = c(n_spp, nt)
# atualizar tempo
ti = ti + mu_t
}
# armazenar novo tempo após especiação/extinção
ts = c(ts, ti)
}
plot(ts, n_spp, type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = "BD")
ti
tf
ti < tf
n_spp
ts
mu_t
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.5
# Taxa de extinção por unidade de tempo
mu <- 0.05
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 100
# tempo atual
ti <- 0
# vetor para armazenar o tempo
ts = ti
## Cenário de diversidade
# número atual de espécies
n <- 10
# Vetor de diversidade de espécies
n_spp <- nt
while (ti < tf) {
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
# se a especiação acontece primeiro
if(lambda_t < mu_t){
# adicionar uma espécie
n = n + 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + lambda_t
}
# se a extinção acontece primeiro
if(lambda_t > mu_t){
# remover uma espécie
n = n - 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + mu_t
}
# armazenar novo tempo após especiação/extinção
ts = c(ts, ti)
}
ts
# Visualiza os resultados
plot(ts, n_spp, type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = "BD")
# Visualiza os resultados
plot(x = ts,
y = n_spp,
type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = paste0("BD ", "lambda: ", lambda, "mu: ", mu)
)
# Visualiza os resultados
plot(x = ts,
y = n_spp,
type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = paste0("BD ", "lambda: ", lambda, " mu: ", mu)
)
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.5
# Taxa de extinção por unidade de tempo
mu <- 0.05
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 20
# tempo atual
ti <- 0
# vetor para armazenar o tempo
ts = ti
## Cenário de diversidade
# número atual de espécies
n <- 10
# Vetor de diversidade de espécies
n_spp <- nt
while (ti < tf) {
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
# se a especiação acontece primeiro
if(lambda_t < mu_t){
# adicionar uma espécie
n = n + 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + lambda_t
}
# se a extinção acontece primeiro
if(lambda_t > mu_t){
# remover uma espécie
n = n - 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + mu_t
}
# armazenar novo tempo após especiação/extinção
ts = c(ts, ti)
}
# Visualiza os resultados
plot(x = ts,
y = n_spp,
type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = paste0("BD ", "lambda: ", lambda, " mu: ", mu)
)
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.5
# Taxa de extinção por unidade de tempo
mu <- 0.05
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 20
# tempo atual
ti <- 0
# vetor para armazenar o tempo
ts = ti
## Cenário de diversidade
# número atual de espécies
n <- 1
# Vetor de diversidade de espécies
n_spp <- nt
while (ti < tf) {
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
# se a especiação acontece primeiro
if(lambda_t < mu_t){
# adicionar uma espécie
n = n + 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + lambda_t
}
# se a extinção acontece primeiro
if(lambda_t > mu_t){
# remover uma espécie
n = n - 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + mu_t
}
# armazenar novo tempo após especiação/extinção
ts = c(ts, ti)
}
# Visualiza os resultados
plot(x = ts,
y = n_spp,
type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = paste0("BD ", "lambda: ", lambda, " mu: ", mu)
)
## Parâmetros do modelo Birth-Death
# Taxa de especiação por unidade de tempo
lambda <- 0.5
# Taxa de extinção por unidade de tempo
mu <- 0.05
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 20
# tempo atual
ti <- 0
# vetor para armazenar o tempo
ts = ti
## Cenário de diversidade
# número atual de espécies
n <- 1
# Vetor de diversidade de espécies
n_spp <- n
while (ti < tf) {
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
# se a especiação acontece primeiro
if(lambda_t < mu_t){
if (lambda_t + ti > tf) break
# adicionar uma espécie
n = n + 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + lambda_t
}
# se a extinção acontece primeiro
if(lambda_t > mu_t){
if (mu_t + ti > tf) break
# remover uma espécie
n = n - 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + mu_t
}
# armazenar novo tempo após especiação/extinção
ts = c(ts, ti)
}
# Visualiza os resultados
plot(x = ts,
y = n_spp,
type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = paste0("BD ", "lambda: ", lambda, " mu: ", mu)
)
## Cenário temporal
# tempo final (em milhões de anos)
tf <- 20
# tempo atual
ti <- 0
# vetor para armazenar o tempo
ts = ti
## Cenário de diversidade
# número atual de espécies
n <- 1
# Vetor de diversidade de espécies
n_spp <- n
while (ti < tf) {
# Tempo até a próxima especiação  e extinção
lambda_t <- rexp(1, rate = lambda)
mu_t <- rexp(1, rate = mu)
# se a especiação acontece primeiro
if(lambda_t < mu_t){
if (lambda_t + ti > tf) break
# adicionar uma espécie
n = n + 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + lambda_t
}
# se a extinção acontece primeiro
if(lambda_t > mu_t){
if (mu_t + ti > tf) break
# remover uma espécie
n = n - 1
# atualizar vetor de diversidade
n_spp = c(n_spp, n)
# atualizar tempo
ti = ti + mu_t
}
# armazenar novo tempo após especiação/extinção
ts = c(ts, ti)
}
# Visualiza os resultados
plot(x = ts,
y = n_spp,
type = "l", col = "blue",
xlab = "Tempo (em milhões de anos)",
ylab = "Número de espécies",
main = paste0("BD ", "lambda: ", lambda, " mu: ", mu)
)
