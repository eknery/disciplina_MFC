fsize=0.45)
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
header=FALSE,
fsize=0.45)
levels(sqData.pruned)
sqData.pruned
unique(spData.pruned$rear.toes)
toes
### cores para cada estado
cols<-c("0" = "white",
"1" = "lightblue",
"2" = "darkblue",
"3" = "purple",
"4" = "red",
"5" = "darkred")
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45)
legend("topright",
legend=names(cols),
pch=22,
pt.cex=1.5,
pt.bg=cols,
bty="n",
cex=0.8)
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0,
xexp = 1.12,
yexp = 0.98)
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0,
xexp = 0.8)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0,
xexp = 1)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 2,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0.5,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0.9,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0.01,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=FALSE,
fsize=0.45,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=T,
fsize=0.45,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.4,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.3,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.3,
space = 0.1,
xexp = 1.2)
legend("topright",
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.3,
space = 0.1,
xexp = 1.2)
legend("topright",
### plotando árvore com estados
plotTree.datamatrix(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.3,
space = 0.1,
xexp = 1.2)
legend("topright",
legend=names(cols),
pch=22,
pt.cex=1.5,
pt.bg=cols,
bty="n",
cex=0.8)
### marriz com estados ordenados
ordered.model<-matrix(c(
0,1,0,0,0,0,
2,0,3,0,0,0,
0,4,0,5,0,0,
0,0,6,0,7,0,
0,0,0,8,0,9,
0,0,0,0,10,0),6,6,byrow=TRUE,
dimnames=list(0:5,0:5))
### ver matriz
ordered.model
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
X = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.3,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = sqData.pruned,
colors=list(cols),
header=F,
fsize=0.3,
space = 0.1,
xexp = 1.2)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = sqData.pruned,
colors=list(cols),
)
sqData.pruned$rear.toes
sqData.pruned
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=list(cols),
)
toes
setNames(c("blue","red"),
c("suction","bite"))
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
)
legend("topright",
legend=names(cols),
pch=22,
pt.cex=1.5,
pt.bg=cols,
bty="n",
cex=0.8)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize =0.4
)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
legend = F)
legend("bottomright",
legend=names(cols),
pch=22,
pt.cex=1.5,
pt.bg=cols,
bty="n",
cex=0.8)
legend("bottomleft",
legend=names(cols),
pch=22,
pt.cex=1.5,
pt.bg=cols,
bty="n",
cex=0.8)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
cex = 0.5,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
cex = 0.3,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
cex = 0.2,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
pch = 0.2,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
cex = 0.2,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
cex = 1,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
cex = 1,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
pt.cex = 1,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.4,
pt.cex = 0.3,
legend = F)
### plotando árvore com estados
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
pt.cex = 0.3,
legend = F)
data.frame(Genus_sp=names(toes),
feed.mode=as.numeric(toes))
data.frame(Genus_sp=names(toes),
feed.mode=as.numeric(toes)-1)
### organizando dados em dataframe
toes_df = data.frame(Genus_sp=names(toes), feed.mode=as.numeric(toes)-1)
toes_df
sqData.pruned
### organizando dados em dataframe
toes_df = data.frame(Genus_sp=names(sqData.pruned),
toes=sqData.pruned[,"rear.toes"]-1)
toes_df
names(sqData.pruned)
sqData.pruned
rownames(sqData.pruned)
### organizando dados em dataframe
toes_df = data.frame(Genus_sp= rownames(sqData.pruned),
toes=sqData.pruned[,"rear.toes"]-1)
toes_df
### organizando dados em dataframe
toes_df = data.frame(Genus_sp= rownames(sqData.pruned),
toes=sqData.pruned[,"rear.toes"])
toes_df
### reconstrução global
fit.joint<-corHMM(sqTree.pruned,
toes.data,
node.states="joint",
rate.cat=1,
rate.mat= ordered.model
)
if (!require("corHMM")) install.packages("corHMM");library("corHMM")
### reconstrução global
fit.joint<-corHMM(sqTree.pruned,
toes.data,
node.states="joint",
rate.cat=1,
rate.mat= ordered.model
)
### organizando dados em dataframe
toes_data = data.frame(Genus_sp= rownames(sqData.pruned),
toes=sqData.pruned[,"rear.toes"])
toes_data
### reconstrução global
fit.joint<-corHMM(sqTree.pruned,
toes.data,
node.states="joint",
rate.cat=1,
rate.mat= ordered.model
)
### reconstrução global
fit.joint<-corHMM(phy = sqTree.pruned,
data = toes.data,
node.states= "joint",
rate.cat=1,
rate.mat= ordered.model
)
### organizando dados em dataframe
toes.data = data.frame(Genus_sp= rownames(sqData.pruned),
toes=sqData.pruned[,"rear.toes"])
toes.data
### reconstrução global
fit.joint<-corHMM(phy = sqTree.pruned,
data = toes.data,
node.states= "joint",
rate.cat=1,
rate.mat= ordered.model
)
fit.joint
fit.joint
### visualizando reconstrução
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.3,
legend = F)
### visualizando reconstrução
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.1,
legend = F)
to.matrix(
levels(toes)[fit.joint$phy$node.label],
levels(toes)
to.matrix(
levels(toes)[fit.joint$phy$node.label],
levels(toes))
### visualizando reconstrução
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.1,
legend = F)
nodelabels(pie=to.matrix(levels(toes)[fit.joint$phy$node.label], levels(toes) ),
piecol=cols,
cex=0.4)
### reconstrução marginal
fit.marginal<-corHMM(phy = sqTree.pruned,
data = toes.data,
node.states= "marginal",
rate.cat=1,
rate.mat= ordered.model
)
fit.marginal
### visualizando reconstrução marginal
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.1,
legend = F)
nodelabels(pie=to.matrix(levels(toes)[fit.marginal$phy$node.label], levels(toes) ),
piecol=cols,
cex=0.4)
fit.marginal
fit.marginal$phy
fit.marginal$phy$node.label
fit.marginal$states
levels(toes)
fit.marginal$phy$states
fit.marginal$states
levels(toes)[fit.marginal$states]
to.matrix(fit.marginal$states)
as.matrix(fit.marginal$states)
nodelabels(pie=as.data.frame(fit.marginal$states,col.names = names(cols)),
piecol=cols,
cex=0.4)
as.data.frame(fit.jointl$states,col.names = names(cols))
as.data.frame(fit.joint$states,col.names = names(cols))
fit.joint$states
nodelabels(pie=fit.joint$states,
piecol=cols,
cex=0.4)
### visualizando reconstrução global
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.1,
legend = F)
nodelabels(pie=fit.joint$states,
piecol=cols,
cex=0.4)
fit.joint$states
levels(toes)
to.matrix(levels(toes)[fit.joint$phy$node.label], levels(toes) )
### visualizando reconstrução global
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.1,
legend = F)
nodelabels(pie=to.matrix(levels(toes)[fit.joint$phy$node.label], levels(toes) ),
piecol=cols,
cex=0.4)
nodelabels(pie=to.matrix(levels(toes)[fit.joint$phy$node.label], levels(toes) ),
piecol=cols,
cex=0.4)
legend("bottomleft",
legend=names(cols),
pch=22,
pt.cex=1.5,
pt.bg=cols,
bty="n",
cex=0.8)
### visualizando reconstrução marginal
dotTree(tree = sqTree.pruned,
x = toes,
colors=cols,
fsize = 0.3,
cex = 0.1,
legend = F)
nodelabels(pie= as.data.frame(fit.marginal$states,col.names = names(cols)),
piecol=cols,
cex=0.4)
